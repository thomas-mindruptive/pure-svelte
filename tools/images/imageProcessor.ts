// File: tools/images/imageProcessor.ts

/**
 * Image download and storage logic
 *
 * Downloads generated images from URLs and saves them to disk
 */

import * as fs from "fs/promises";
import * as path from "path";
import { existsSync } from "fs";
import type { ImageGenerationConfig } from "./generateMissingImages.config.js";

/**
 * Downloads an image from a URL and saves it to the configured directory
 *
 * @param imageUrl - URL of the generated image (from fal.ai)
 * @param filename - Filename to save as (generated by promptBuilder)
 * @param config - Configuration with image_directory
 * @returns Absolute filepath of the saved image
 */
export async function downloadAndSaveImage(
  imageUrl: string,
  filename: string,
  config: ImageGenerationConfig['generation']
): Promise<string> {
  console.log(`  ├─ Downloading image...`);

  try {
    // Ensure directory exists
    if (!existsSync(config.image_directory)) {
      console.log(`  │  Creating directory: ${config.image_directory}`);
      await fs.mkdir(config.image_directory, { recursive: true });
    }

    // Download image
    const response = await fetch(imageUrl);

    if (!response.ok) {
      throw new Error(`Failed to download image: HTTP ${response.status}`);
    }

    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    // Build absolute filepath
    const filepath = path.join(config.image_directory, filename);

    // Save to disk
    await fs.writeFile(filepath, buffer);

    const sizeKB = (buffer.length / 1024).toFixed(1);
    console.log(`  ├─ Saved to: ${filepath} (${sizeKB} KB)`);

    return filepath;

  } catch (error: any) {
    console.error(`  ✗ Download error: ${error.message || String(error)}`);
    throw new Error(`Failed to download/save image: ${error.message}`);
  }
}

/**
 * Verifies that the image directory is writable
 *
 * Should be called before starting batch generation
 */
export async function verifyImageDirectory(directory: string): Promise<void> {
  try {
    // Create directory if it doesn't exist
    if (!existsSync(directory)) {
      console.log(`Creating image directory: ${directory}`);
      await fs.mkdir(directory, { recursive: true });
    }

    // Test write permissions
    const testFile = path.join(directory, ".test_write_permission");
    await fs.writeFile(testFile, "test");
    await fs.unlink(testFile);

    console.log(`✓ Image directory is writable: ${directory}`);
  } catch (error: any) {
    throw new Error(
      `Image directory is not writable: ${directory}\n` +
      `Error: ${error.message}\n` +
      `Please check directory permissions.`
    );
  }
}
